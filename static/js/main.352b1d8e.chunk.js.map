{"version":3,"sources":["img/logo.svg","img/sunny.svg","img/planet.svg","img/banana.svg","img/dragonfruit.svg","img/carrie.svg","components/Illustrations.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Illustrations","react_default","a","createElement","className","src","sunny","alt","planet","banana","dragonfruit","PureComponent","Main","href","carrie","App","react_router_dom","to","logo","onClick","activeClassName","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wXC+BzBC,0LApBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAOF,UAAU,aAAaG,IAAI,UAC5CN,EAAAC,EAAAC,cAAA,qBAEAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKG,IAAQJ,UAAU,QAAQG,IAAI,WACxCN,EAAAC,EAAAC,cAAA,sBAEAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKI,IAAQL,UAAU,QAAQG,IAAI,WACxCN,EAAAC,EAAAC,cAAA,sBAEAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKK,IAAaN,UAAU,QAAQG,IAAI,gBAC7CN,EAAAC,EAAAC,cAAA,mCAhBoBQ,2CCgBbC,mLAlBX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,UACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,wCAGAH,EAAAC,EAAAC,cAAA,KAAGU,KAAK,gCAAgCT,UAAU,WAAlD,YAIJH,EAAAC,EAAAC,cAAA,OAAKE,IAAKS,IAAQV,UAAU,WAAWG,IAAI,mBAdhCI,iBC+BJI,0LA1BX,OACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,GAAG,KACPhB,EAAAC,EAAAC,cAAA,OACEE,IAAKa,IACLd,UAAU,OACVG,IAAI,SACJY,QAAS,gBAGblB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAASC,GAAG,iBAAiBb,UAAU,gBAAgBgB,gBAAgB,YAAvE,kBAIFnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjCX,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOE,KAAK,iBAAiBC,UAAWxB,cApBlCW,kBCIEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.352b1d8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ddb22d1c.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.90b7234e.svg\";","module.exports = __webpack_public_path__ + \"static/media/planet.9a13ab3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/banana.12020fd0.svg\";","module.exports = __webpack_public_path__ + \"static/media/dragonfruit.fa09f929.svg\";","module.exports = __webpack_public_path__ + \"static/media/carrie.d768dc02.svg\";","import React, { PureComponent } from 'react';\n\nimport sunny from '../img/sunny.svg';\nimport planet from '../img/planet.svg';\nimport banana from '../img/banana.svg';\nimport dragonfruit from '../img/dragonfruit.svg';\n\nimport './Illustrations.css';\n\nclass Illustrations extends PureComponent {\n  render() {\n    return (\n      <div className=\"Illustrations\">\n        <h1>illustrations</h1>\n\n        <img src={sunny} className=\"image spin\" alt=\"sunny\" />\n        <p>the sun.</p>\n\n        <img src={planet} className=\"image\" alt=\"planet\" />\n        <p>a planet.</p>\n\n        <img src={banana} className=\"image\" alt=\"banana\" />\n        <p>a banana.</p>\n\n        <img src={dragonfruit} className=\"image\" alt=\"dragonfruit\" />\n        <p>a dragonfruit.</p>\n      </div>\n    );\n  }\n}\n\nexport default Illustrations;\n","import React, { PureComponent } from 'react';\n\nimport './Main.css';\nimport carrie from '../img/carrie.svg';\n\nclass Main extends PureComponent {\n  render() {\n    return (\n      <div className=\"Main\">\n        <div className=\"left\">\n            <h1 className=\"name\">hello,</h1>\n            <h1 className=\"name\">i'm carrie.</h1>\n            <div className=\"words\">\n                aspiring artist and product designer\n            </div>\n            <a href=\"mailto:carrierong37@gmail.com\" className=\"contact\">\n                CONTACT\n            </a>\n        </div>\n        <img src={carrie} className=\"portrait\" alt=\"carrie\" />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { PureComponent } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, NavLink } from \"react-router-dom\";\n\nimport logo from './img/logo.svg';\nimport Illustrations from './components/Illustrations';\nimport Main from './components/Main';\nimport './App.css';\n\nclass App extends PureComponent {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"Navbar\">\n            <Link to=\"/\">\n              <img\n                src={logo}\n                className=\"logo\"\n                alt=\"carrie\" \n                onClick={() => {}}\n              />\n            </Link>\n            <NavLink to=\"/illustrations\" className=\"illustrations\" activeClassName=\"selected\">\n              illustrations\n            </NavLink>\n          </div>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/illustrations\" component={Illustrations} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}